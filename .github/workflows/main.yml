name: Resume Screener CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: resume_screener_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-production.txt
        pip install pytest pytest-django pytest-cov flake8 black isort

    - name: Create test settings
      run: |
        cat > core/settings_ci.py << 'EOF'
        import os
        from pathlib import Path
        
        BASE_DIR = Path(__file__).resolve().parent.parent
        SECRET_KEY = 'test-secret-key-for-ci-testing-12345'
        DEBUG = True
        ALLOWED_HOSTS = ['*']
        
        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'corsheaders',
            'accounts',
            'jobs',
        ]
        
        MIDDLEWARE = [
            'corsheaders.middleware.CorsMiddleware',
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]
        
        ROOT_URLCONF = 'core.urls'
        
        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [BASE_DIR / 'templates'],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
        
        WSGI_APPLICATION = 'core.wsgi.application'
        AUTH_USER_MODEL = 'accounts.CustomUser'
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'resume_screener_test',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': 'localhost',
                'PORT': '5432',
            }
        }
        
        LANGUAGE_CODE = 'en-us'
        TIME_ZONE = 'UTC'
        USE_I18N = True
        USE_TZ = True
        
        STATIC_URL = 'static/'
        STATIC_ROOT = BASE_DIR / 'staticfiles'
        MEDIA_URL = '/media/'
        MEDIA_ROOT = BASE_DIR / 'media'
        
        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
        
        CORS_ALLOWED_ORIGINS = [
            "http://localhost:3000",
            "http://127.0.0.1:3000",
        ]
        CORS_ALLOW_CREDENTIALS = True
        CORS_ALLOW_ALL_ORIGINS = True
        
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
        DEFAULT_FROM_EMAIL = 'test@example.com'
        
        LOGIN_URL = '/login/'
        LOGIN_REDIRECT_URL = '/'
        LOGOUT_REDIRECT_URL = '/'
        
        REDIS_URL = 'redis://localhost:6379/0'
        AI_MICROSERVICE_URL = 'http://localhost:8001'
        
        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'handlers': {
                'null': {
                    'class': 'logging.NullHandler',
                },
            },
            'root': {
                'handlers': ['null'],
            },
        }
        EOF

    - name: Run migrations
      run: python manage.py migrate --settings=core.settings_ci

    - name: Run Django tests
      run: python manage.py test --settings=core.settings_ci --verbosity=2

    - name: Test AI microservice (basic)
      working-directory: ./ai_microservice
      run: |
        pip install -r requirements.txt
        python -c "import main; print('AI microservice imports successfully')"

    - name: Check critical code style issues
      run: |
        echo "Checking for critical syntax errors..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Some syntax issues found"

    - name: Check code formatting (non-blocking)
      run: |
        black --check --diff . || echo "Black formatting differences found"
        isort --check-only --diff . || echo "Import sorting differences found"

  build_and_push:
    name: Build & Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [web, ai-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Web image
      if: matrix.component == 'web'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push AI Service image
      if: matrix.component == 'ai-service'
      uses: docker/build-push-action@v5
      with:
        context: ./ai_microservice
        file: ./ai_microservice/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security_scan:
    name: Security Scan
    needs: build_and_push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        component: [web, ai-service]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.component }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.component }}.sarif'

  deploy_staging:
    name: Deploy to Staging
    needs: [test, build_and_push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.your-domain.com

    steps:
    - name: Deploy to staging server
      run: |
        echo "Staging deployment would happen here"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:develop-${{ github.sha }}"

  deploy_production:
    name: Deploy to Production
    needs: [test, build_and_push, security_scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-domain.com

    steps:
    - name: Checkout deployment scripts
      uses: actions/checkout@v4

    - name: Deploy to production server
      if: false  # Disable actual deployment for now
      run: |
        echo "Production deployment would happen here"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest"

  notify:
    name: Notify Deployment Status
    needs: [deploy_staging, deploy_production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Slack
      if: false  # Disable notifications for now
      run: |
        echo "Slack notification would be sent here"
        echo "Status: ${{ needs.deploy_production.result || needs.deploy_staging.result }}"
