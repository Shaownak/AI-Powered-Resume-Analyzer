version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: resume-screener
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: shaownak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache and Message Broker  
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
  # Django Backend Application (optional for development)
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:shaownak@db:5432/resume-screener
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - AI_MICROSERVICE_URL=http://ai-service:8001
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python manage.py runserver 0.0.0.0:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system-status/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Microservice (standalone for development)
  ai-service:
    build:
      context: .
      dockerfile: ai_microservice/Dockerfile
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://:redis_password@redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional for development)
  nginx-dev:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "8080:8080"  # Different port for dev to avoid conflicts
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/:ro
    depends_on:
      - web
      - ai-service
    profiles:
      - with-nginx  # Use profile to make nginx optional

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
